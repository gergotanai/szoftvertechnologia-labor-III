// <auto-generated />
using System;
using EntityFrameworkRelationships;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace EntityFrameworkRelationships.Migrations
{
    [DbContext(typeof(RelationshipsContext))]
    partial class RelationshipsContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("EntityFrameworkRelationships.Hierarchical", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("ParentId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ParentId");

                    b.ToTable("Hierarchicals");
                });

            modelBuilder.Entity("EntityFrameworkRelationships.ManyToManyLeft", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.HasKey("Id");

                    b.ToTable("ManyToManyLefts");
                });

            modelBuilder.Entity("EntityFrameworkRelationships.ManyToManyRelationship", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.HasKey("Id");

                    b.ToTable("ManyToManyRelationships");
                });

            modelBuilder.Entity("EntityFrameworkRelationships.ManyToManyRight", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.HasKey("Id");

                    b.ToTable("ManyToManyRights");
                });

            modelBuilder.Entity("EntityFrameworkRelationships.ManyToManyWithModeledLeft", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("RelationshipId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RelationshipId");

                    b.ToTable("ManyToManyWithModeledLefts");
                });

            modelBuilder.Entity("EntityFrameworkRelationships.ManyToManyWithModeledRight", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("RelationshipId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RelationshipId");

                    b.ToTable("ManyToManyWithModeledRights");
                });

            modelBuilder.Entity("EntityFrameworkRelationships.NotRelated", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.HasKey("Id");

                    b.ToTable("NotRelateds");
                });

            modelBuilder.Entity("EntityFrameworkRelationships.OneToMany", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.HasKey("Id");

                    b.ToTable("OneToManys");
                });

            modelBuilder.Entity("EntityFrameworkRelationships.OneToManyItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("OneToManyId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("OneToManyId");

                    b.ToTable("OneToManyItems");
                });

            modelBuilder.Entity("EntityFrameworkRelationships.OneToManyOwner", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.HasKey("Id");

                    b.ToTable("OneToManyOwners");
                });

            modelBuilder.Entity("EntityFrameworkRelationships.OneToOneLeft", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("OneToOneRightId")
                        .HasColumnType("int");

                    b.Property<int?>("RightId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RightId");

                    b.ToTable("OneToOneLefts");
                });

            modelBuilder.Entity("EntityFrameworkRelationships.OneToOneOwner", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.HasKey("Id");

                    b.ToTable("OneToOneOwners");
                });

            modelBuilder.Entity("EntityFrameworkRelationships.OneToOneRight", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<int>("OneToOneLeftId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("OneToOneRights");
                });

            modelBuilder.Entity("ManyToManyLeftManyToManyRight", b =>
                {
                    b.Property<int>("LeftsId")
                        .HasColumnType("int");

                    b.Property<int>("RightsId")
                        .HasColumnType("int");

                    b.HasKey("LeftsId", "RightsId");

                    b.HasIndex("RightsId");

                    b.ToTable("ManyToManyLeftManyToManyRight");
                });

            modelBuilder.Entity("EntityFrameworkRelationships.Hierarchical", b =>
                {
                    b.HasOne("EntityFrameworkRelationships.Hierarchical", "Parent")
                        .WithMany("Children")
                        .HasForeignKey("ParentId");

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("EntityFrameworkRelationships.ManyToManyWithModeledLeft", b =>
                {
                    b.HasOne("EntityFrameworkRelationships.ManyToManyRelationship", "Relationship")
                        .WithMany("Lefts")
                        .HasForeignKey("RelationshipId");

                    b.Navigation("Relationship");
                });

            modelBuilder.Entity("EntityFrameworkRelationships.ManyToManyWithModeledRight", b =>
                {
                    b.HasOne("EntityFrameworkRelationships.ManyToManyRelationship", "Relationship")
                        .WithMany("Rights")
                        .HasForeignKey("RelationshipId");

                    b.Navigation("Relationship");
                });

            modelBuilder.Entity("EntityFrameworkRelationships.OneToManyItem", b =>
                {
                    b.HasOne("EntityFrameworkRelationships.OneToMany", "OneToMany")
                        .WithMany("Items")
                        .HasForeignKey("OneToManyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("OneToMany");
                });

            modelBuilder.Entity("EntityFrameworkRelationships.OneToManyOwner", b =>
                {
                    b.OwnsMany("EntityFrameworkRelationships.OneToManyOwnedItem", "Items", b1 =>
                        {
                            b1.Property<int>("OneToManyOwnerId")
                                .HasColumnType("int");

                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int");

                            SqlServerPropertyBuilderExtensions.UseIdentityColumn(b1.Property<int>("Id"), 1L, 1);

                            b1.Property<string>("Name")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("OneToManyOwnerId", "Id");

                            b1.ToTable("OneToManyOwnedItem");

                            b1.WithOwner()
                                .HasForeignKey("OneToManyOwnerId");
                        });

                    b.Navigation("Items");
                });

            modelBuilder.Entity("EntityFrameworkRelationships.OneToOneLeft", b =>
                {
                    b.HasOne("EntityFrameworkRelationships.OneToOneRight", "Right")
                        .WithMany()
                        .HasForeignKey("RightId");

                    b.Navigation("Right");
                });

            modelBuilder.Entity("EntityFrameworkRelationships.OneToOneOwner", b =>
                {
                    b.OwnsOne("EntityFrameworkRelationships.OneToOneOwned", "Owned", b1 =>
                        {
                            b1.Property<int>("OneToOneOwnerId")
                                .HasColumnType("int");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("OneToOneOwnerId");

                            b1.ToTable("OneToOneOwners");

                            b1.WithOwner()
                                .HasForeignKey("OneToOneOwnerId");
                        });

                    b.Navigation("Owned");
                });

            modelBuilder.Entity("EntityFrameworkRelationships.OneToOneRight", b =>
                {
                    b.HasOne("EntityFrameworkRelationships.OneToOneLeft", "Left")
                        .WithOne()
                        .HasForeignKey("EntityFrameworkRelationships.OneToOneRight", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Left");
                });

            modelBuilder.Entity("ManyToManyLeftManyToManyRight", b =>
                {
                    b.HasOne("EntityFrameworkRelationships.ManyToManyLeft", null)
                        .WithMany()
                        .HasForeignKey("LeftsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EntityFrameworkRelationships.ManyToManyRight", null)
                        .WithMany()
                        .HasForeignKey("RightsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("EntityFrameworkRelationships.Hierarchical", b =>
                {
                    b.Navigation("Children");
                });

            modelBuilder.Entity("EntityFrameworkRelationships.ManyToManyRelationship", b =>
                {
                    b.Navigation("Lefts");

                    b.Navigation("Rights");
                });

            modelBuilder.Entity("EntityFrameworkRelationships.OneToMany", b =>
                {
                    b.Navigation("Items");
                });
#pragma warning restore 612, 618
        }
    }
}
